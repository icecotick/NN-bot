import discord
from discord.ext import commands
from discord.ext.commands import CommandOnCooldown
import random
import os
import asyncpg
import sys
import asyncio
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("DISCORD_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL") or "postgresql://postgres:KoiwhbfRHSNZZfrsDHRsniDsoRonHDPx@ballast.proxy.rlwy.net:53277/railway"
ROLE_NAME = "–ü–∞—Ç—Ä–∏–æ—Ç"
CUSTOM_ROLE_PRICE = 2000
CRIT_CHANCE = 10
SUCCESS_CHANCE = 40
ADMIN_ROLES = ["—Å–æ–∑–¥–∞—Ç–µ–ª—å", "–≥–ª–∞–≤–Ω—ã–π –º–æ–¥–µ—Ä"]
ROB_CHANCE = 25  # –®–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ–π –∫—Ä–∞–∂–∏
ROB_PERCENT = 20  # –ü—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–∂–∏/—à—Ç—Ä–∞—Ñ–∞
ROB_COOLDOWN = 3600  # 1 —á–∞—Å –∫—É–ª–¥–∞—É–Ω–∞
CASINO_COOLDOWN = 60  # 1 –º–∏–Ω—É—Ç–∞ –∫—É–ª–¥–∞—É–Ω–∞
CASINO_MULTIPLIERS = {
    2: 35,  # x2 (35% —à–∞–Ω—Å)
    3: 10,  # x3 (10% —à–∞–Ω—Å)
    5: 2,   # x5 (2% —à–∞–Ω—Å)
    0: 53   # –ü—Ä–æ–∏–≥—Ä—ã—à (53% —à–∞–Ω—Å)
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–≤–µ–Ω—Ç–æ–≤

}
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∏–≤–µ–Ω—Ç–æ–≤
EVENT_ACTIVE = False
EVENT_MULTIPLIER = 1.0
EVENT_TYPE = None
EVENT_END_TIME = 0
active_duels = {}

def is_admin(member: discord.Member) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return any(role.name.lower() in ADMIN_ROLES for role in member.roles)
# –°–∏—Å—Ç–µ–º–∞ –∏–≤–µ–Ω—Ç–æ–≤
async def check_events():
    while True:
        global EVENT_ACTIVE
        if EVENT_ACTIVE and time.time() > EVENT_END_TIME:
            EVENT_ACTIVE = False
            print("–ò–≤–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        await asyncio.sleep(60)
        # –°–∏—Å—Ç–µ–º–∞ –¥—É—ç–ª–µ–π
async def duel_timeout(channel):
    await asyncio.sleep(120)
    if channel.id in active_duels:
        host_id = active_duels[channel.id]["host"]
        update_balance(host_id, active_duels[channel.id]["bet"])
        del active_duels[channel.id]
        await channel.send("üïí –í—Ä–µ–º—è –¥—É—ç–ª–∏ –≤—ã—à–ª–æ!")
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DISCORD_TOKEN")
    sys.exit(1)

if not DATABASE_URL:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DATABASE_URL")
    sys.exit(1)

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

async def create_db_pool():
    try:
        print("‚åõ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        pool = await asyncpg.create_pool(
            DATABASE_URL,
            min_size=1,
            max_size=5,
            command_timeout=10,
            server_settings={'application_name': 'discord-bot'}
        )
        async with pool.acquire() as conn:
            await conn.execute("SELECT 1")
        return pool
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)

@bot.event
async def on_ready():
    try:
        bot.db = await create_db_pool()
        
        async with bot.db.acquire() as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    balance INTEGER DEFAULT 0
                )
            """)
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS custom_roles (
                    user_id BIGINT PRIMARY KEY,
                    role_id BIGINT,
                    role_name TEXT,
                    role_color TEXT
                )
            """)
        
        print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        await bot.close()

async def close_db():
    if hasattr(bot, 'db') and not bot.db.is_closed():
        await bot.db.close()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

@bot.event
async def on_disconnect():
    await close_db()

async def get_balance(user_id: int) -> int:
    async with bot.db.acquire() as conn:
        result = await conn.fetchrow("SELECT balance FROM users WHERE user_id = $1", user_id)
        return result["balance"] if result else 0

async def update_balance(user_id: int, amount: int):
    async with bot.db.acquire() as conn:
        await conn.execute("""
            INSERT INTO users (user_id, balance)
            VALUES ($1, $2)
            ON CONFLICT (user_id)
            DO UPDATE SET balance = users.balance + $2
        """, user_id, amount)

async def get_custom_role(user_id: int):
    async with bot.db.acquire() as conn:
        return await conn.fetchrow("SELECT * FROM custom_roles WHERE user_id = $1", user_id)

async def create_custom_role(user_id: int, role_id: int, role_name: str, role_color: str):
    async with bot.db.acquire() as conn:
        await conn.execute("""
            INSERT INTO custom_roles (user_id, role_id, role_name, role_color)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (user_id)
            DO UPDATE SET role_id = $2, role_name = $3, role_color = $4
        """, user_id, role_id, role_name, role_color)

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, CommandOnCooldown):
        seconds = int(error.retry_after)
        minutes = seconds // 60
        seconds = seconds % 60
        await ctx.send(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes}–º {seconds}—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º!")
    else:
        print(f"‚ö† –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {error}")
        await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

@bot.command(name="—Å–ª–∞–≤–∞–Ω–Ω")
@commands.cooldown(rate=1, per=7200, type=commands.BucketType.user)
async def slav_party(ctx):
    user = ctx.author
    role = discord.utils.get(ctx.guild.roles, name=ROLE_NAME)

    if not role:
        await ctx.send('‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
        return

    if role in user.roles:
        await ctx.send(f'üü• {user.mention}, —Ç—ã —É–∂–µ –ü–∞—Ç—Ä–∏–æ—Ç!')
        return

    roll = random.randint(1, 100)
    balance = await get_balance(user.id)

    if roll <= CRIT_CHANCE:
        await user.add_roles(role)
        await update_balance(user.id, 1000)
        await ctx.send(f'üí• **–ö–†–ò–¢!** {user.mention}, —Ç—ã –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å + 1000 –∫—Ä–µ–¥–∏—Ç–æ–≤! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')
    elif roll <= SUCCESS_CHANCE:
        await user.add_roles(role)
        await update_balance(user.id, 100)
        await ctx.send(f'üü• {user.mention}, —Ç—ã –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å + 100 –∫—Ä–µ–¥–∏—Ç–æ–≤! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')
    else:
        penalty = min(10, balance)
        await update_balance(user.id, -penalty)
        await ctx.send(f'üïä {user.mention}, -{penalty} –∫—Ä–µ–¥–∏—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')
        
@bot.command(name="—Ñ–∞—Ä–º")
@commands.cooldown(rate=1, per=1200, type=commands.BucketType.user)
async def farm(ctx):
    if not discord.utils.get(ctx.author.roles, name=ROLE_NAME):
        await ctx.send("‚õî –¢–æ–ª—å–∫–æ –¥–ª—è –ü–∞—Ç—Ä–∏–æ—Ç–æ–≤!")
        return

    base_reward = random.randint(5, 15)
    
    if EVENT_ACTIVE and EVENT_TYPE == "—Ñ–∞—Ä–º":
        reward = int(base_reward * EVENT_MULTIPLIER)
        event_bonus = f" (–ò–≤–µ–Ω—Ç x{EVENT_MULTIPLIER})"
    else:
        reward = base_reward
        event_bonus = ""
    
    update_balance(ctx.author.id, reward)
    await ctx.send(f"üåæ {ctx.author.mention}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} –∫—Ä–µ–¥–∏—Ç–æ–≤{event_bonus}! –ë–∞–ª–∞–Ω—Å: {get_balance(ctx.author.id)}")

@bot.command(name="–±–∞–ª–∞–Ω—Å")
@commands.cooldown(rate=1, per=5, type=commands.BucketType.user)
async def balance(ctx):
    bal = await get_balance(ctx.author.id)
    await ctx.send(f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal} –∫—Ä–µ–¥–∏—Ç–æ–≤')

@bot.command(name="–ø–µ—Ä–µ–≤–µ—Å—Ç–∏")
async def transfer(ctx, member: discord.Member, amount: int):
    if amount <= 0:
        await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        return

    sender_balance = await get_balance(ctx.author.id)
    if sender_balance < amount:
        await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return

    await update_balance(ctx.author.id, -amount)
    await update_balance(member.id, amount)
    await ctx.send(f'‚úÖ {ctx.author.mention} –ø–µ—Ä–µ–≤–µ–ª {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ {member.mention}!')

@bot.command(name="—Ç–æ–ø")
@commands.cooldown(rate=1, per=5, type=commands.BucketType.user)
async def top(ctx):
    async with bot.db.acquire() as conn:
        top_users = await conn.fetch("SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 10")

    if not top_users:
        await ctx.send("üòî –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
        return

    leaderboard = []
    for i, record in enumerate(top_users, start=1):
        try:
            user = await bot.fetch_user(record['user_id'])
            leaderboard.append(f"{i}. {user.name} ‚Äî {record['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        except:
            leaderboard.append(f"{i}. [–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π] ‚Äî {record['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤")

    await ctx.send("üèÜ **–¢–æ–ø 10:**\n" + "\n".join(leaderboard))

@bot.command(name="–¥–æ–ø–∫—Ä–µ–¥–∏—Ç")
async def add_credits(ctx, member: discord.Member, amount: int):
    if not is_admin(ctx.author):
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    if amount <= 0:
        await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        return
    
    await update_balance(member.id, amount)
    await ctx.send(f"‚úÖ –ê–¥–º–∏–Ω {ctx.author.mention} –¥–æ–±–∞–≤–∏–ª {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ {member.mention}")

@bot.command(name="–º–∏–Ω—É—Å–∫—Ä–µ–¥–∏—Ç")
async def remove_credits(ctx, member: discord.Member, amount: int):
    if not is_admin(ctx.author):
        await ctx.send("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    if amount <= 0:
        await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        return
    
    current_balance = await get_balance(member.id)
    if current_balance < amount:
        await ctx.send(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ {current_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤!")
        return
    
    await update_balance(member.id, -amount)
    await ctx.send(f"‚úÖ –ê–¥–º–∏–Ω {ctx.author.mention} —Å–Ω—è–ª {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ —É {member.mention}")
    # –î—É—ç–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
@bot.command(name="–±–∞–∫—à–æ—Ç_—Ö–æ—Å—Ç")
@commands.cooldown(1, 300, commands.BucketType.user)
async def host_duel(ctx, bet: int):
    if bet < 100:
        await ctx.send("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 100 –∫—Ä–µ–¥–∏—Ç–æ–≤!")
        return
    
    balance = get_balance(ctx.author.id)
    if balance < bet:
        await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return

    update_balance(ctx.author.id, -bet)
    active_duels[ctx.channel.id] = {
        "host": ctx.author.id,
        "bet": bet,
        "participant": None
    }
    
    embed = discord.Embed(
        title="üí• –î—É—ç–ª—å —Å–æ–∑–¥–∞–Ω–∞!",
        description=f"{ctx.author.mention} —Å—Ç–∞–≤–∏—Ç {bet} –∫—Ä–µ–¥–∏—Ç–æ–≤!\n"
                    f"–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è: `!–±–∞–∫—à–æ—Ç_–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è`",
        color=0xff0000
    )
    await ctx.send(embed=embed)
    await duel_timeout(ctx.channel)

@bot.command(name="–±–∞–∫—à–æ—Ç_–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è")
async def join_duel(ctx):
    if ctx.channel.id not in active_duels:
        await ctx.send("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—É—ç–ª–µ–π!")
        return
        
    duel = active_duels[ctx.channel.id]
    if duel["participant"] or ctx.author.id == duel["host"]:
        await ctx.send("‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!")
        return

    if get_balance(ctx.author.id) < duel["bet"]:
        await ctx.send(f"‚ùå –ù—É–∂–Ω–æ {duel['bet']} –∫—Ä–µ–¥–∏—Ç–æ–≤!")
        return

    update_balance(ctx.author.id, -duel["bet"])
    duel["participant"] = ctx.author.id
    
    # –ê–Ω–∏–º–∞—Ü–∏—è –¥—É—ç–ª–∏
    msg = await ctx.send("üî´ –î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è... 3")
    for i in range(2, 0, -1):
        await asyncio.sleep(1)
        await msg.edit(content=f"üî´ –î—É—ç–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è... {i}")
    await asyncio.sleep(1)
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    winner_id = random.choice([duel["host"], duel["participant"]])
    update_balance(winner_id, duel["bet"]*2)
    winner = await bot.fetch_user(winner_id)
    
    embed = discord.Embed(
        title="üéâ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –¥—É—ç–ª–∏!",
        description=f"{winner.mention} –∑–∞–±–∏—Ä–∞–µ—Ç {duel['bet']*2} –∫—Ä–µ–¥–∏—Ç–æ–≤!",
        color=0x00ff00
    )
    await ctx.send(embed=embed)
    del active_duels[ctx.channel.id]


@bot.command(name="–æ–≥—Ä–∞–±–∏—Ç—å")
@commands.cooldown(rate=1, per=ROB_COOLDOWN, type=commands.BucketType.user)
async def rob(ctx, member: discord.Member):
    thief = ctx.author
    victim = member
    
    if thief == victim:
        await ctx.send("‚ùå –ù–µ–ª—å–∑—è –≥—Ä–∞–±–∏—Ç—å —Å–µ–±—è!")
        return
    
    thief_balance = await get_balance(thief.id)
    victim_balance = await get_balance(victim.id)
    
    if victim_balance < 10:
        await ctx.send(f"‚ùå –£ {victim.mention} —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∫—Ä–µ–¥–∏—Ç–æ–≤!")
        return
    
    steal_amount = max(1, int(victim_balance * (ROB_PERCENT / 100)))
    
    if random.randint(1, 100) <= ROB_CHANCE:
        await update_balance(victim.id, -steal_amount)
        await update_balance(thief.id, steal_amount)
        await ctx.send(
            f"üí∞ {thief.mention} –æ–≥—Ä–∞–±–∏–ª {victim.mention} –∏ —É–∫—Ä–∞–ª {steal_amount} –∫—Ä–µ–¥–∏—Ç–æ–≤!\n"
            f"üí∏ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {await get_balance(thief.id)}"
        )
    else:
        penalty = max(1, int(thief_balance * (ROB_PERCENT / 100)))
        await update_balance(thief.id, -penalty)
        await ctx.send(
            f"üö® {thief.mention} –ø–æ–ø–∞–ª—Å—è –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–≥—Ä–∞–±–∏—Ç—å {victim.mention}!\n"
            f"üí∏ –®—Ç—Ä–∞—Ñ: {penalty} –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {await get_balance(thief.id)}"
        )

@bot.command(name="–≤–µ–∑–µ–Ω–∏–µ")
@commands.cooldown(rate=1, per=CASINO_COOLDOWN, type=commands.BucketType.user)
async def casino(ctx, amount: int):
    user = ctx.author
    balance = await get_balance(user.id)
    
    if amount <= 0:
        await ctx.send("‚ùå –°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        return
    
    if balance < amount:
        await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}")
        return
    
    multipliers = list(CASINO_MULTIPLIERS.keys())
    weights = list(CASINO_MULTIPLIERS.values())
    result = random.choices(multipliers, weights=weights, k=1)[0]
    
    if result == 0:
        await update_balance(user.id, -amount)
        await ctx.send(f"üé∞ {user.mention} —Å—Ç–∞–≤–∏—Ç {amount} –∏... –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç! üí∏")
    else:
        win = amount * result
        await update_balance(user.id, win)
        await ctx.send(f"üé∞ {user.mention} —Å—Ç–∞–≤–∏—Ç {amount} –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç x{result}! üéâ +{win} –∫—Ä–µ–¥–∏—Ç–æ–≤!")
        
@bot.command(name="–∏–≤–µ–Ω—Ç_—Å—Ç–∞—Ä—Ç")
@commands.has_permissions(administrator=True)
async def start_event(ctx, hours: int, multiplier: float, event_type: str = "—Ñ–∞—Ä–º"):
    global EVENT_ACTIVE, EVENT_MULTIPLIER, EVENT_TYPE, EVENT_END_TIME
    
    EVENT_ACTIVE = True
    EVENT_MULTIPLIER = multiplier
    EVENT_TYPE = event_type.lower()
    EVENT_END_TIME = time.time() + hours * 3600
    
    embed = discord.Embed(
        title="üéä –ò–í–ï–ù–¢ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!",
        description=f"**{event_type.upper()}** –¥–∞–µ—Ç x{multiplier} –Ω–∞–≥—Ä–∞–¥—ã!\n–î–µ–π—Å—Ç–≤—É–µ—Ç {hours} —á–∞—Å–æ–≤.",
        color=0xffd700
    )
    await ctx.send(embed=embed)

@bot.command(name="–∏–≤–µ–Ω—Ç_—Å—Ç–∞—Ç—É—Å")
async def event_status(ctx):
    if EVENT_ACTIVE:
        remaining = int((EVENT_END_TIME - time.time()) // 60)
        embed = discord.Embed(
            title="üì¢ –ê–∫—Ç–∏–≤–Ω—ã–π –∏–≤–µ–Ω—Ç",
            description=f"**–¢–∏–ø:** {EVENT_TYPE}\n**–ú–Ω–æ–∂–∏—Ç–µ–ª—å:** x{EVENT_MULTIPLIER}\n**–û—Å—Ç–∞–ª–æ—Å—å:** {remaining} –º–∏–Ω—É—Ç",
            color=0x00ff00
        )
    else:
        embed = discord.Embed(
            title="‚ÑπÔ∏è –ò–≤–µ–Ω—Ç–æ–≤ –Ω–µ—Ç",
            description="–ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π `!–∏–≤–µ–Ω—Ç_—Å—Ç–∞—Ä—Ç`",
            color=0xff0000
        )
    await ctx.send(embed=embed)
    
@bot.command(name="–º–∞–≥–∞–∑–∏–Ω")
async def shop(ctx):
    shop_text = f"""
üõç **–ú–∞–≥–∞–∑–∏–Ω:**

üé® `!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ù–∞–∑–≤–∞–Ω–∏–µ" #–¶–≤–µ—Ç` - –ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å ({CUSTOM_ROLE_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤)
–ü—Ä–∏–º–µ—Ä: `!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ë–æ–≥–∞—á" #ff0000`

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {await get_balance(ctx.author.id)} –∫—Ä–µ–¥–∏—Ç–æ–≤
"""
    await ctx.send(shop_text)

@bot.command(name="–∫—É–ø–∏—Ç—å—Ä–æ–ª—å")
async def buy_role(ctx, role_name: str, role_color: str):
    user = ctx.author
    balance = await get_balance(user.id)
    
    if balance < CUSTOM_ROLE_PRICE:
        await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {CUSTOM_ROLE_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤.")
        return
    
    existing_role = await get_custom_role(user.id)
    if existing_role:
        try:
            old_role = ctx.guild.get_role(existing_role['role_id'])
            if old_role:
                await old_role.delete()
        except:
            pass
    
    try:
        color = discord.Color.from_str(role_color)
        new_role = await ctx.guild.create_role(
            name=role_name,
            color=color,
            reason=f"–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å –¥–ª—è {user.name}"
        )
        await user.add_roles(new_role)
        await create_custom_role(user.id, new_role.id, role_name, role_color)
        await update_balance(user.id, -CUSTOM_ROLE_PRICE)
        await ctx.send(f"‚úÖ {user.mention}, –≤—ã –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å {new_role.mention}!")
    except ValueError:
        await ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞! –ü—Ä–∏–º–µ—Ä: `#ff0000`")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await ctx.send("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏!")

@bot.command(name="–ø–æ–º–æ—â—å")
async def help_command(ctx):
    help_text = f"""
üìú **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**

üî¥ `!—Å–ª–∞–≤–∞–Ω–Ω` - –°—Ç–∞—Ç—å –ü–∞—Ç—Ä–∏–æ—Ç–æ–º (2—á –∫–¥)
üåæ `!—Ñ–∞—Ä–º` - –ó–∞—Ä–∞–±–æ—Ç–æ–∫ (20–º –∫–¥)
üí∞ `!–±–∞–ª–∞–Ω—Å` - –í–∞—à –±–∞–ª–∞–Ω—Å
üí∏ `!–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ @—é–∑–µ—Ä —Å—É–º–º–∞` - –ü–µ—Ä–µ–≤–æ–¥
üèÜ `!—Ç–æ–ø` - –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤
üõç `!–º–∞–≥–∞–∑–∏–Ω` - –ú–∞–≥–∞–∑–∏–Ω
üé® `!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ù–∞–∑–≤" #–¶–≤–µ—Ç` - –ö—É–ø–∏—Ç—å —Ä–æ–ª—å
‚ûï `!–¥–æ–ø–∫—Ä–µ–¥–∏—Ç @—é–∑–µ—Ä —Å—É–º–º–∞` - –î–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã (–∞–¥–º–∏–Ω)
‚ûñ `!–º–∏–Ω—É—Å–∫—Ä–µ–¥–∏—Ç @—é–∑–µ—Ä —Å—É–º–º–∞` - –°–Ω—è—Ç—å –∫—Ä–µ–¥–∏—Ç—ã (–∞–¥–º–∏–Ω)
ü¶π `!–æ–≥—Ä–∞–±–∏—Ç—å @—é–∑–µ—Ä` - –ü–æ–ø—ã—Ç–∫–∞ –∫—Ä–∞–∂–∏ (1—á –∫–¥)
üé∞ `!–≤–µ–∑–µ–Ω–∏–µ —Å—É–º–º–∞` - –ò–≥—Ä–∞ –≤ –≤–µ–∑–µ–Ω–∏–µ (1–º –∫–¥)
‚ÑπÔ∏è `!–ø–æ–º–æ—â—å` - –°–ø—Ä–∞–≤–∫–∞
üì¢ `!–∏–≤–µ–Ω—Ç_—Å—Ç–∞—Ä—Ç` - –°—Ç–∞—Ä—Ç—É–µ—Ç –∏–≤–µ–Ω—Ç –¥–ª—è —Ñ–∞—Ä–º–∞ (–∞–¥–º–∏–Ω)
üé∞ `!–±–∞–∫—à–æ—Ç_—Ö–æ—Å—Ç —Å—É–º–º–∞` - —Å—Ç–∞—Ä—Ç—É–µ—Ç –∏–≥—Ä—É "–±–∞–∫—à–æ—Ç —Ä—É–ª–µ—Ç–∫—É"
 `!–±–∞–∫—à–æ—Ç_–ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è` - –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–µ–Ω–∏–µ –∫ —Ä–∞—É–Ω–¥—É
–ü—Ä–∏–º–µ—Ä—ã:
`!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ë–æ–≥–∞—á" #ff0000`
`!–≤–µ–∑–µ–Ω–∏–µ 500`
`!–æ–≥—Ä–∞–±–∏—Ç—å @–ò–≥—Ä–æ–∫`
`!–∏–≤–µ–Ω—Ç_—Å—Ç–∞—Ä—Ç –∏–≤–µ–Ω—Ç_—Å—Ç–∞—Ä—Ç 2 2.5 —Ñ–∞—Ä–º` (2 —á–∞—Å–∞, x2.5 –∫ —Ñ–∞—Ä–º—É)
"""
    await ctx.send(help_text)

def run_bot():
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(bot.start(TOKEN))
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if loop.is_running():
            loop.run_until_complete(close_db())
        loop.close()

if __name__ == "__main__":
    run_bot()
