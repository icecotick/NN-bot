import discord
from discord.ext import commands
from discord.ext.commands import CommandOnCooldown
import random
import os
import asyncpg
import sys
import asyncio
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("DISCORD_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL") or "postgresql://postgres:KoiwhbfRHSNZZfrsDHRsniDsoRonHDPx@ballast.proxy.rlwy.net:53277/railway"
ROLE_NAME = "–ü–∞—Ç—Ä–∏–æ—Ç"
CUSTOM_ROLE_PRICE = 2000
CRIT_CHANCE = 10
SUCCESS_CHANCE = 40
ADMIN_ROLES = ["—Å–æ–∑–¥–∞—Ç–µ–ª—å", "–≥–ª–∞–≤–Ω—ã–π –º–æ–¥–µ—Ä"]  # –†–æ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

def is_admin(member: discord.Member) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return any(role.name.lower() in ADMIN_ROLES for role in member.roles)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not TOKEN:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DISCORD_TOKEN")
    sys.exit(1)

if not DATABASE_URL:
    print("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω DATABASE_URL")
    sys.exit(1)

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

async def create_db_pool():
    try:
        print("‚åõ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
        pool = await asyncpg.create_pool(
            DATABASE_URL,
            min_size=1,
            max_size=5,
            command_timeout=10,
            server_settings={
                'application_name': 'discord-bot'
            }
        )
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        async with pool.acquire() as conn:
            await conn.execute("SELECT 1")
        return pool
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        sys.exit(1)

@bot.event
async def on_ready():
    try:
        bot.db = await create_db_pool()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        async with bot.db.acquire() as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id BIGINT PRIMARY KEY,
                    balance INTEGER DEFAULT 0
                )
            """)
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS custom_roles (
                    user_id BIGINT PRIMARY KEY,
                    role_id BIGINT,
                    role_name TEXT,
                    role_color TEXT
                )
            """)
        
        print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        await bot.close()

async def close_db():
    if hasattr(bot, 'db') and not bot.db.is_closed():
        await bot.db.close()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")

@bot.event
async def on_disconnect():
    await close_db()

async def get_balance(user_id: int) -> int:
    async with bot.db.acquire() as conn:
        result = await conn.fetchrow(
            "SELECT balance FROM users WHERE user_id = $1", 
            user_id
        )
        return result["balance"] if result else 0

async def update_balance(user_id: int, amount: int):
    async with bot.db.acquire() as conn:
        await conn.execute("""
            INSERT INTO users (user_id, balance)
            VALUES ($1, $2)
            ON CONFLICT (user_id)
            DO UPDATE SET balance = users.balance + $2
        """, user_id, amount)

async def get_custom_role(user_id: int):
    async with bot.db.acquire() as conn:
        return await conn.fetchrow(
            "SELECT * FROM custom_roles WHERE user_id = $1",
            user_id
        )

async def create_custom_role(user_id: int, role_id: int, role_name: str, role_color: str):
    async with bot.db.acquire() as conn:
        await conn.execute("""
            INSERT INTO custom_roles (user_id, role_id, role_name, role_color)
            VALUES ($1, $2, $3, $4)
            ON CONFLICT (user_id)
            DO UPDATE SET role_id = $2, role_name = $3, role_color = $4
        """, user_id, role_id, role_name, role_color)

@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, CommandOnCooldown):
        seconds = int(error.retry_after)
        minutes = seconds // 60
        seconds = seconds % 60
        await ctx.send(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes}–º {seconds}—Å, –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞.")
    else:
        print(f"‚ö† –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {error}")
        await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

@bot.command(name="—Å–ª–∞–≤–∞–Ω–Ω")
@commands.cooldown(rate=1, per=7200, type=commands.BucketType.user)
async def slav_party(ctx):
    user = ctx.author
    role = discord.utils.get(ctx.guild.roles, name=ROLE_NAME)

    if not role:
        await ctx.send('‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
        return

    if role in user.roles:
        await ctx.send(f'üü• {user.mention}, —Ç—ã —É–∂–µ –ü–∞—Ç—Ä–∏–æ—Ç!')
        return

    roll = random.randint(1, 100)
    balance = await get_balance(user.id)

    if roll <= CRIT_CHANCE:
        await user.add_roles(role)
        await update_balance(user.id, 1000)
        await ctx.send(f'üí• **–ö–†–ò–¢!** {user.mention}, —Ç—ã –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å + 1000 —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')

    elif roll <= SUCCESS_CHANCE:
        await user.add_roles(role)
        await update_balance(user.id, 100)
        await ctx.send(f'üü• {user.mention}, —Ç—ã –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å + 100 —Ä–µ–π—Ç–∏–Ω–≥–∞! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')

    else:
        penalty = min(10, balance)
        await update_balance(user.id, -penalty)
        await ctx.send(f'üïä {user.mention}, -{penalty} —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')

@bot.command(name="—Ñ–∞—Ä–º")
@commands.cooldown(rate=1, per=1200, type=commands.BucketType.user)
async def farm(ctx):
    user = ctx.author
    role = discord.utils.get(ctx.guild.roles, name=ROLE_NAME)

    if not role or role not in user.roles:
        await ctx.send("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ü–∞—Ç—Ä–∏–æ—Ç–æ–≤.")
        return

    reward = random.randint(5, 15)
    await update_balance(user.id, reward)
    await ctx.send(f"üåæ {user.mention}, –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {reward} —Å–æ—Ü. –∫—Ä–µ–¥–∏—Ç–æ–≤! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})")

@bot.command(name="–±–∞–ª–∞–Ω—Å")
@commands.cooldown(rate=1, per=5, type=commands.BucketType.user)
async def balance(ctx):
    bal = await get_balance(ctx.author.id)
    await ctx.send(f'üí∞ {ctx.author.mention}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {bal}')

@bot.command(name="–ø–µ—Ä–µ–≤–µ—Å—Ç–∏")
async def transfer(ctx, member: discord.Member, amount: int):
    if amount <= 0:
        await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        return

    sender_balance = await get_balance(ctx.author.id)
    if sender_balance < amount:
        await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return

    await update_balance(ctx.author.id, -amount)
    await update_balance(member.id, amount)
    await ctx.send(f'‚úÖ {ctx.author.mention} –ø–µ—Ä–µ–≤–µ–ª {amount} —Ä–µ–π—Ç–∏–Ω–≥–∞ {member.mention}!')

@bot.command(name="—Ç–æ–ø")
@commands.cooldown(rate=1, per=5, type=commands.BucketType.user)
async def top(ctx):
    async with bot.db.acquire() as conn:
        top_users = await conn.fetch(
            "SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 10"
        )

    if not top_users:
        await ctx.send("üòî –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
        return

    leaderboard = []
    for i, record in enumerate(top_users, start=1):
        try:
            user = await bot.fetch_user(record['user_id'])
            leaderboard.append(f"{i}. {user.name} ‚Äî {record['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        except:
            leaderboard.append(f"{i}. [–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] ‚Äî {record['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤")

    await ctx.send("üèÜ **–¢–æ–ø 10 –ü–∞—Ç—Ä–∏–æ—Ç–æ–≤:**\n" + "\n".join(leaderboard))

@bot.command(name="–¥–æ–ø–∫—Ä–µ–¥–∏—Ç")
async def add_credits(ctx, member: discord.Member, amount: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(ctx.author):
        await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    if amount <= 0:
        await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        return
    
    await update_balance(member.id, amount)
    new_balance = await get_balance(member.id)
    await ctx.send(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ctx.author.mention} –¥–æ–±–∞–≤–∏–ª {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {member.mention}\n"
                   f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤")

@bot.command(name="–º–∏–Ω—É—Å–∫—Ä–µ–¥–∏—Ç")
async def remove_credits(ctx, member: discord.Member, amount: int):
    """–£–¥–∞–ª—è–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã —É —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(ctx.author):
        await ctx.send("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        return
    
    if amount <= 0:
        await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        return
    
    current_balance = await get_balance(member.id)
    if current_balance < amount:
        await ctx.send(f"‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–æ–ª—å–∫–æ {current_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤, –Ω–µ–ª—å–∑—è —Å–Ω—è—Ç—å {amount}!")
        return
    
    await update_balance(member.id, -amount)
    new_balance = await get_balance(member.id)
    await ctx.send(f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ctx.author.mention} —Å–Ω—è–ª {amount} –∫—Ä–µ–¥–∏—Ç–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {member.mention}\n"
                   f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫—Ä–µ–¥–∏—Ç–æ–≤")

@bot.command(name="–ø–æ–º–æ—â—å")
async def help_command(ctx):
    help_text = f"""
üìú **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**

üî¥ `!—Å–ª–∞–≤–∞–Ω–Ω` ‚Äî –ø–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞—Ç—å –ü–∞—Ç—Ä–∏–æ—Ç–æ–º (2—á –∫–¥)
üåæ `!—Ñ–∞—Ä–º` ‚Äî –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã (20–º –∫–¥, —Ç–æ–ª—å–∫–æ –¥–ª—è –ü–∞—Ç—Ä–∏–æ—Ç–æ–≤)
üí∞ `!–±–∞–ª–∞–Ω—Å` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å (5—Å –∫–¥)
üí∏ `!–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ @—é–∑–µ—Ä —Å—É–º–º–∞` ‚Äî –ø–µ—Ä–µ–≤–æ–¥ –∫—Ä–µ–¥–∏—Ç–æ–≤
üèÜ `!—Ç–æ–ø` ‚Äî —Ç–æ–ø-10 –ø–æ –±–∞–ª–∞–Ω—Å—É (5—Å –∫–¥)
üõç `!–º–∞–≥–∞–∑–∏–Ω` ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
üé® `!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ù–∞–∑–≤–∞–Ω–∏–µ" #–¶–≤–µ—Ç` ‚Äî –∫—É–ø–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å ({CUSTOM_ROLE_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤)
‚ûï `!–¥–æ–ø–∫—Ä–µ–¥–∏—Ç @—é–∑–µ—Ä —Å—É–º–º–∞` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫—Ä–µ–¥–∏—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
‚ûñ `!–º–∏–Ω—É—Å–∫—Ä–µ–¥–∏—Ç @—é–∑–µ—Ä —Å—É–º–º–∞` ‚Äî —Å–Ω—è—Ç—å –∫—Ä–µ–¥–∏—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
‚ÑπÔ∏è `!–ø–æ–º–æ—â—å` ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

–ü—Ä–∏–º–µ—Ä—ã:
`!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ë–æ–≥–∞—á" #ff0000`
`!–¥–æ–ø–∫—Ä–µ–¥–∏—Ç @–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 500`
`!–º–∏–Ω—É—Å–∫—Ä–µ–¥–∏—Ç @–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 200`
"""
    await ctx.send(help_text)

@bot.command(name="–º–∞–≥–∞–∑–∏–Ω")
async def shop(ctx):
    shop_text = f"""
üõç **–ú–∞–≥–∞–∑–∏–Ω —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞:**

üé® `!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ù–∞–∑–≤–∞–Ω–∏–µ" #–¶–≤–µ—Ç` - –ö—É–ø–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å ({CUSTOM_ROLE_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤)
–ü—Ä–∏–º–µ—Ä: `!–∫—É–ø–∏—Ç—å—Ä–æ–ª—å "–ë–æ–≥–∞—á" #ff0000`

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {await get_balance(ctx.author.id)} –∫—Ä–µ–¥–∏—Ç–æ–≤
"""
    await ctx.send(shop_text)

@bot.command(name="–∫—É–ø–∏—Ç—å—Ä–æ–ª—å")
async def buy_role(ctx, role_name: str, role_color: str):
    user = ctx.author
    balance = await get_balance(user.id)
    
    if balance < CUSTOM_ROLE_PRICE:
        await ctx.send(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù—É–∂–Ω–æ {CUSTOM_ROLE_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤, —É –≤–∞—Å {balance}.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_role = await get_custom_role(user.id)
    if existing_role:
        try:
            old_role = ctx.guild.get_role(existing_role['role_id'])
            if old_role:
                await old_role.delete()
        except:
            pass
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å
    try:
        # –ü–∞—Ä—Å–∏–º —Ü–≤–µ—Ç
        color = discord.Color.from_str(role_color)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–æ–ª—å
        new_role = await ctx.guild.create_role(
            name=role_name,
            color=color,
            reason=f"–ö–∞—Å—Ç–æ–º–Ω–∞—è —Ä–æ–ª—å –¥–ª—è {user.name}"
        )
        
        # –î–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await user.add_roles(new_role)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await create_custom_role(user.id, new_role.id, role_name, role_color)
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏
        await update_balance(user.id, -CUSTOM_ROLE_PRICE)
        
        await ctx.send(f"‚úÖ {user.mention}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å {new_role.mention} –∑–∞ {CUSTOM_ROLE_PRICE} –∫—Ä–µ–¥–∏—Ç–æ–≤!")
    except ValueError:
        await ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–≤–µ—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HEX —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: `#ff0000`")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
        await ctx.send("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def run_bot():
    try:
        loop = asyncio.get_event_loop()
        loop.run_until_complete(bot.start(TOKEN))
    except discord.errors.LoginFailure:
        print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Discord. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω.")
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É...")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if loop.is_running():
            loop.run_until_complete(close_db())
        loop.close()

if __name__ == "__main__":
    run_bot()
