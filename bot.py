import discord
from discord.ext import commands
from discord.ext.commands import CommandOnCooldown
import random
import os
import asyncpg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.getenv("DISCORD_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
ROLE_NAME = "–ü–∞—Ç—Ä–∏–æ—Ç"
CRIT_CHANCE = 10
SUCCESS_CHANCE = 40

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
@bot.event
async def on_ready():
    bot.db = await asyncpg.create_pool(DATABASE_URL)
    await bot.db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id BIGINT PRIMARY KEY,
            balance INTEGER DEFAULT 0
        )
    """)
    print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ {bot.user}")

# –†–∞–±–æ—Ç–∞ —Å –±–∞–∑–æ–π
async def get_balance(user_id):
    result = await bot.db.fetchrow("SELECT balance FROM users WHERE user_id=$1", user_id)
    return result["balance"] if result else 0

async def update_balance(user_id, amount):
    await bot.db.execute("""
        INSERT INTO users (user_id, balance)
        VALUES ($1, $2)
        ON CONFLICT (user_id)
        DO UPDATE SET balance = users.balance + $2
    """, user_id, amount)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, CommandOnCooldown):
        seconds = int(error.retry_after)
        minutes = seconds // 60
        seconds = seconds % 60
        await ctx.send(f"‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ {minutes}–º {seconds}—Å, –ø—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞.")
    else:
        raise error

# –ö–æ–º–∞–Ω–¥–∞ "—Å–ª–∞–≤–∞–Ω–Ω"
@bot.command(name="—Å–ª–∞–≤–∞–Ω–Ω")
@commands.cooldown(rate=1, per=7200, type=commands.BucketType.user)
async def slav_party(ctx):
    user = ctx.author
    role = discord.utils.get(ctx.guild.roles, name=ROLE_NAME)

    if not role:
        await ctx.send('‚ùå –†–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!')
        return

    if role in user.roles:
        await ctx.send(f'üü• {user.mention}, —Ç—ã —É–∂–µ –ü–∞—Ç—Ä–∏–æ—Ç!')
        return

    roll = random.randint(1, 100)
    balance = await get_balance(user.id)

    if roll <= CRIT_CHANCE:
        await user.add_roles(role)
        await update_balance(user.id, 1000)
        await ctx.send(f'üí• **–ö–†–ò–¢!** {user.mention}, —Ç—ã –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å + 1000 —Å–æ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')

    elif roll <= SUCCESS_CHANCE:
        await user.add_roles(role)
        await update_balance(user.id, 100)
        await ctx.send(f'üü• {user.mention}, —Ç—ã –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å + 100 —Ä–µ–π—Ç–∏–Ω–≥–∞! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')

    else:
        penalty = min(10, balance)
        await update_balance(user.id, -penalty)
        await ctx.send(f'üïä {user.mention}, -{penalty} —Ä–µ–π—Ç–∏–Ω–≥–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})')

# –ö–æ–º–∞–Ω–¥–∞ "—Ñ–∞—Ä–º"
@bot.command(name="—Ñ–∞—Ä–º")
@commands.cooldown(rate=1, per=1200, type=commands.BucketType.user)
async def farm(ctx):
    user = ctx.author
    role = discord.utils.get(ctx.guild.roles, name=ROLE_NAME)

    if not role or role not in user.roles:
        await ctx.send("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ü–∞—Ç—Ä–∏–æ—Ç–æ–≤.")
        return

    reward = random.randint(10, 40)
    await update_balance(user.id, reward)
    await ctx.send(f"üåæ {user.mention}, –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {reward} —Å–æ—Ü. –∫—Ä–µ–¥–∏—Ç–æ–≤! (–ë–∞–ª–∞–Ω—Å: {await get_balance(user.id)})")

# –ö–æ–º–∞–Ω–¥–∞ "–±–∞–ª–∞–Ω—Å"
@bot.command(name="–±–∞–ª–∞–Ω—Å")
@commands.cooldown(rate=1, per=5, type=commands.BucketType.user)
async def balance(ctx):
    bal = await get_balance(ctx.author.id)
    await ctx.send(f'üí∞ {ctx.author.mention}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {bal}')

# –ö–æ–º–∞–Ω–¥–∞ "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏"
@bot.command(name="–ø–µ—Ä–µ–≤–µ—Å—Ç–∏")
async def transfer(ctx, member: discord.Member, amount: int):
    if amount <= 0:
        await ctx.send("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
        return

    sender_balance = await get_balance(ctx.author.id)
    if sender_balance < amount:
        await ctx.send("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return

    await update_balance(ctx.author.id, -amount)
    await update_balance(member.id, amount)
    await ctx.send(f'‚úÖ {ctx.author.mention} –ø–µ—Ä–µ–≤–µ–ª {amount} —Ä–µ–π—Ç–∏–Ω–≥–∞ {member.mention}!')

# –ö–æ–º–∞–Ω–¥–∞ "—Ç–æ–ø"
@bot.command(name="—Ç–æ–ø")
@commands.cooldown(rate=1, per=5, type=commands.BucketType.user)
async def top(ctx):
    top_users = await bot.db.fetch("SELECT user_id, balance FROM users ORDER BY balance DESC LIMIT 10")

    if not top_users:
        await ctx.send("üòî –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.")
        return

    leaderboard = []
    for i, record in enumerate(top_users, start=1):
        try:
            user = await bot.fetch_user(record['user_id'])
            leaderboard.append(f"{i}. {user.name} ‚Äî {record['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤")
        except:
            leaderboard.append(f"{i}. [–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] ‚Äî {record['balance']} –∫—Ä–µ–¥–∏—Ç–æ–≤")

    await ctx.send("üèÜ **–¢–æ–ø 10 –ü–∞—Ç—Ä–∏–æ—Ç–æ–≤:**\n" + "\n".join(leaderboard))

# –ö–æ–º–∞–Ω–¥–∞ "–ø–æ–º–æ—â—å"
@bot.command(name="–ø–æ–º–æ—â—å")
async def help_command(ctx):
    help_text = """
üìú **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**

üî¥ `!—Å–ª–∞–≤–∞–Ω–Ω` ‚Äî –ø–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞—Ç—å –ü–∞—Ç—Ä–∏–æ—Ç–æ–º (2—á –∫–¥)
üåæ `!—Ñ–∞—Ä–º` ‚Äî –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∫—Ä–µ–¥–∏—Ç—ã (20–º –∫–¥, —Ç–æ–ª—å–∫–æ –¥–ª—è –ü–∞—Ç—Ä–∏–æ—Ç–æ–≤)
üí∞ `!–±–∞–ª–∞–Ω—Å` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å (5—Å –∫–¥)
üí∏ `!–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ @—é–∑–µ—Ä —Å—É–º–º–∞` ‚Äî –ø–µ—Ä–µ–≤–æ–¥ –∫—Ä–µ–¥–∏—Ç–æ–≤
üèÜ `!—Ç–æ–ø` ‚Äî —Ç–æ–ø-10 –ø–æ –±–∞–ª–∞–Ω—Å—É (5—Å –∫–¥)
‚ÑπÔ∏è `!–ø–æ–º–æ—â—å` ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
"""
    await ctx.send(help_text)

bot.run(TOKEN)
